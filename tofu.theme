<?php

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_html_head_alter().
 */
function tofu_html_head_alter(&$head_elements) {
  // HTML5 charset declaration.
  $head_elements['system_meta_content_type']['#attributes'] = array(
    'charset' => 'utf-8',
  );

  // Optimize mobile viewport.
  $head_elements['mobile_viewport'] = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1',
    ),
  );
}

/**
 * Implements template_preprocess_().
 * @param array $variables
 */
function tofu_preprocess(&$variables, $hook) {
  global $base_url;
  $variables['base_url'] = $base_url;

  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
}


/**
 * Implements template_preprocess_html().
 * @param array $variables
 */
function tofu_preprocess_html(&$variables) {
  if (!empty($variables['page']['sidebar_first'])) {
    $sidebar_left = $variables['page']['sidebar_first'];
  }

  if (!empty($variables['page']['sidebar_second'])) {
    $sidebar_right = $variables['page']['sidebar_second'];
  }

  // Dynamic sidebars.
  if (!empty($sidebar_left) && !empty($sidebar_right)) {
    $variables['attributes']['class'][] = 'two-sidebars';
  }
  elseif (empty($sidebar_left) && !empty($sidebar_right)) {
    $variables['attributes']['class'][] = 'one-sidebar';
    $variables['attributes']['class'][] = 'sidebar-second';
  }
  elseif (!empty($sidebar_left) && empty($sidebar_right)) {
    $variables['attributes']['class'][] = 'one-sidebar';
    $variables['attributes']['class'][] = 'sidebar-first';
  }
  else {
    $variables['attributes']['class'][] = 'no-sidebars';
  }
}

/**
 * Implements template_preprocess_page.
 * @param array $variables
 */
function tofu_preprocess_page(&$variables) {
  $site_name = \Drupal::configFactory()->get('system.site')->get('name');
  $variables['linked_site_name'] = ['#type' => 'link', '#title' => $site_name, '#url' => Url::fromRoute('<front>')];
}

/**
 * Implements template_preprocess_node.
 * @param array $variables
 */
function tofu_preprocess_node(&$variables) {
  
}

/**
 * Implements hook_theme_suggestions_HOOK_alter(). eg page--type-machine_name.html.twig
 */
function tofu_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__type_'.$content_type;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter.
 * @param array $variables
 */
function tofu_theme_suggestions_block_alter(&$suggestions, $variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content']) && $content['#block_content'] instanceof \Drupal\block_content\BlockContentInterface) {
    $bundle = $content['#block_content']->bundle();
    $suggestions[] = 'block__' . $bundle;
  }
}

/**
 * Implements preprocess_image.
 * @param array $variables
 */

function tofu_preprocess_image(&$variables) {
  if (!empty($variables['uri'])) {
    $variables['attributes']['class'] = 'b-lazy';
    $variables['attributes']['src'] = '/' . drupal_get_path('theme','tofu') . '/images/loaders/placeholder.gif';
    $variables['attributes']['data-src'] = file_url_transform_relative(file_create_url($variables['uri']));
  }
  // Generate a srcset attribute conforming to the spec at
  // http://www.w3.org/html/wg/drafts/html/master/embedded-content.html#attr-img-srcset
  if (!empty($variables['srcset'])) {
    $srcset = array();
    foreach ($variables['srcset'] as $src) {
      // URI is mandatory.
      $source = file_url_transform_relative(file_create_url($src['uri']));
      if (isset($src['width']) && !empty($src['width'])) {
        $source .= ' ' . $src['width'];
      }
      elseif (isset($src['multiplier']) && !empty($src['multiplier'])) {
        $source .= ' ' . $src['multiplier'];
      }
      $srcset[] = $source;
    }
    $variables['attributes']['srcset'] = implode(', ', $srcset);
  }

  foreach (array('width', 'height', 'alt', 'title', 'sizes') as $key) {
    if (isset($variables[$key])) {
      // If the property has already been defined in the attributes,
      // do not override, including NULL.
      if (array_key_exists($key, $variables['attributes'])) {
        continue;
      }
      $variables['attributes'][$key] = $variables[$key];
    }
  }
}

/**
 * Implements form_alter.
 * @param array $variables
 */
function tofu_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
}